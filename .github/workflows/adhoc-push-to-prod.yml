name: Ad-hoc Push to Production

on:
  workflow_dispatch:
    inputs:
      deploy_message:
        description: 'Deployment message'
        required: true
        default: 'Ad-hoc deployment to production'
      git_ref:
        description: 'Git reference (branch, tag, or commit SHA) to deploy'
        type: choice
        required: true
        default: 'releases/production'
        options:
          - 'releases/production'
          - 'releases/staging'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    permissions:
      contents: read
      deployments: write

    strategy:
      fail-fast: true
      matrix:
        ruby-version: [3.4]
        node-version: [22.x]

    env:
      RAILS_ENV: production
      WORKFLOW_GIT_REF: ${{ github.ref }}

    steps:
    - name: Checkout workflow branch
      uses: actions/checkout@v4
      #with:
      #  ref: ${{ github.event.inputs.git_ref }}

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}

    - name: Check ruby version
      run: ruby -v

    - uses: actions/cache@v4
      with:
        path: vendor/bundle
        key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-gems-

    - name: Check workflow git ref
      run: |
        echo "Workflow Git Ref: $WORKFLOW_GIT_REF"

    - name: Deploy ${{ env.WORKFLOW_GIT_REF }} to Production
      env:
        DEPLOY_MESSAGE: ${{ github.event.inputs.deploy_message }}
        # Capture the workflow branch (from workflow_dispatch:) selected ref as an ENV variable
        #WORKFLOW_GIT_REF: ${{ github.ref }}
      run: |
        # Replace the following command with your actual deployment command/script
        echo "Deploying to production with message: $DEPLOY_MESSAGE"
        # Example deployment command:
        # bundle exec cap production deploy MESSAGE="$DEPLOY_MESSAGE"
        #
        # Merge the ref into the releases/production branch and push
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git checkout ${{ github.event.inputs.git_ref }}
        # Merge in the workflow branch (from a workflow_dispatch: run) to capture any changes
        git merge $WORKFLOW_GIT_REF --ff -m "Merge workflow branch into ${{ github.event.inputs.git_ref }} for deployment"
        git push origin ${{ github.event.inputs.git_ref }}
