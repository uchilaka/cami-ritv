# frozen_string_literal: true

require 'swagger_helper'

load 'lib/tasks/fixtures/invoices.thor'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe 'Invoices API', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Invoice. As you add validations to Invoice, be sure to
  # adjust the attributes here as well.

  # We're building for just admins for now
  let(:admin) { Fabricate :admin }

  let(:invoicer) { { email_address: Faker::Internet.email } }
  let(:business_contact) do
    {
      billing_info: {
        business_name: Faker::Business.name,
        email_address: Faker::Internet.email
      }
    }
  end
  let(:individual_contact) do
    {
      billing_info: {
        email_address: Faker::Internet.email,
        name: {
          given_name: Faker::Name.first_name,
          surname: Faker::Name.last_name,
        }
      }
    }
  end
  let(:primary_recipients) do
    [business_contact, individual_contact]
  end
  let(:accounts) do
    primary_recipients.map do |recipient|
      InvoiceAccountSerializer.new(recipient).serializable_hash
    end
  end
  let(:valid_attributes) do
    {
      invoicer:,
      payment_vendor: 'paypal',
      vendor_record_id: random_invoice_vendor_record_id,
      invoice_number: random_invoice_number,
      issued_at: 1.week.ago.to_date,
      due_at: 6.days.from_now.to_date,
      status: :sent,
      amount_cents: 12_00,
      amount_currency: 'USD',
      due_amount_cents: 12_00,
      due_amount_currency: 'USD',
      metadata: { accounts: }
    }
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  before do
    sign_in admin
    allow_any_instance_of(InvoicesController).to receive(:initialize_web_console)
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      invoice = Invoice.create! valid_attributes
      get invoice_url(invoice)
      expect(response).to have_http_status(:ok)
    end
  end

  describe 'GET /new' do
    let(:user) { Fabricate :user }

    context 'when signed in' do
      before { sign_in user }

      it 'renders a successful response' do
        get new_invoice_url
        expect(response).to have_http_status(:ok)
      end
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      invoice = Invoice.create! valid_attributes
      get edit_invoice_url(invoice)
      expect(response).to have_http_status(:ok)
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Invoice' do
        expect do
          post invoices_url, params: { invoice: valid_attributes }
        end.to change(Invoice, :count).by(1)
      end

      it 'redirects to the created invoice' do
        post invoices_url, params: { invoice: valid_attributes }
        expect(response).to redirect_to(invoice_url(Invoice.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Invoice' do
        expect do
          post invoices_url, params: { invoice: invalid_attributes }
        end.to change(Invoice, :count).by(0)
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post invoices_url, params: { invoice: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested invoice' do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: new_attributes }
        invoice.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the invoice' do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: new_attributes }
        invoice.reload
        expect(response).to redirect_to(invoice_url(invoice))
      end
    end

    context 'with invalid parameters' do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        invoice = Invoice.create! valid_attributes
        patch invoice_url(invoice), params: { invoice: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe 'DELETE /destroy', skip: 'Implement invoice soft delete with the discard gem' do
    it 'destroys the requested invoice' do
      invoice = Invoice.create! valid_attributes
      expect do
        delete invoice_url(invoice)
      end.to change(Invoice, :count).by(-1)
    end

    it 'redirects to the invoices list' do
      invoice = Invoice.create! valid_attributes
      delete invoice_url(invoice)
      expect(response).to redirect_to(invoices_url)
    end
  end
end
